#!/bin/sh

trap 'xsetroot -name " dwmbar dead "; exit' EXIT INT TERM HUP
xsetroot -name " Welcome to ${HOST} "
sleep 5

SEP='|'
unset NOPRINT

case "$(tty)" in
/dev/tty?)
	NOPRINT=1
esac

battery() {
	bat="$(cat /sys/class/power_supply/BAT?/capacity)"
	status="$(cat /sys/class/power_supply/BAT?/status)"
	if [ "$status" = "Charging" ]; then
		ico=""
	else
		if [ "$bat" -lt 15 ]; then
			ico="   "
		elif [ "$bat" -lt 30 ]; then
			ico="   "
		elif [ "$bat" -lt 45 ]; then
			ico=" "
		elif [ "$bat" -lt 60 ]; then
			ico=" "
		elif [ "$bat" -lt 75 ]; then
			ico=" "
		elif [ "$bat" -lt 90 ]; then
			ico=" "
		elif [ "$bat" -le 100 ]; then
			ico=" "
		fi
	fi
	printf "%s %s%%" "$ico" "$bat"
}

_date() {
	printf " %s $SEP  %s" "$(date "+%H:%M")" "$(date "+%Y-%m-%d")"
}

backlight() {
	printf "󰛨 %0.f%%" "$(xbacklight -get)"
}

keymap() {
	printf ' '
	getxkbmap | tr '[:lower:]' '[:upper:]'
	printf '\n'
}

volume() {
	vol="$(amixer get Master | awk -F"[][%]" '$0~/%/ { print $2; exit }')"
	if [ "$vol" -lt 30 ]; then
		ico=""
	elif [ "$vol" -lt 60 ]; then
		ico=""
	else
		ico=""
	fi
	amixer get Master | grep -q '\[off\]' && ico="󰝟"
	printf "%s %s%%" "$ico" "$vol"
}

mpd() {
	mpc | grep -q paused && return
	music="$(mpc current -f "%artist% - %title%")"
	[ "$music" ] && printf "🎜  %s %s" "$music" "$SEP"
}

news() {
	news="$(cat ~/.cache/news_unread)"
	[ -z "$news" ] && return
	[ "$news" -gt 0 ] && printf "  %s %s" "$news" "$SEP"
}

updates() {
	# Set this to your current kernel package
	# (e.g.: linux, linux-hardened, linux-zen…)
	krnlpkg='linux'

	fn=~/.cache/checkupdates
	[ ! -f "$fn" ] && setsid sh -c 'checkupdates > "$fn"' >/dev/null 2>&1

	n="$(wc -l "$fn" | awk '{print $1}')"
	[ "$n" -eq 0 ] && return

	if [ -n "$(awk '$1 == "'"$krnlpkg"'"' "$fn")" ]; then
		# Display a penguin if there's a Kernel update available, which
		# might require a reboot.
		printf "  %s %s" "$n" "$SEP"
	else
		printf "  %s %s" "$n" "$SEP"
	fi
}

torrents() {
	data=$(transmission-remote -l 2>/dev/null | grep -E "%|n/a")
	[ "$data" ] || return

	i=0
	while read -r line; do
		per="$(printf %s "$line" | awk '{ printf $2 }')"
		[ "${per%?}" = 100 ] && {
			continue
		}

		[ $i -ge 6 ] && {
			break
		}
		i=$((i+1))

		printf %s "$line" | sed "
				s/.*Stopped.*/  /g;
				s/.*Seeding.*/  /g;
				s/.*Idle.*/  /g;
				s/.*Uploading.*/  /g;
				s/.*Downloading.*/  /g;
				s/.*[A-Z][a-z].*/  / g;
				"
		printf %s "$per"
	done <<-EOF
		$data
	EOF
	transmission-remote -l | grep -qE "%|n/a" && printf " %s" "$SEP"
}

while :; do
	name=" $(mpd)$(torrents)$(news)$(updates) $(volume) $SEP $(keymap) $SEP $(_date) "
	xsetroot -name "$name"
	[ ! "$NOPRINT" ] && printf '%s\n' "$name"
	sleep 1
done
